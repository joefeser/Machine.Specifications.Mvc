//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

using Machine.Specifications.Mvc.Specs.ActionResults;

namespace Machine.Specifications.Mvc.Specs
{
    using System;
    using System.Web.Mvc;

    [Subject(typeof(ViewResultBaseExtensions))]
    public class when_a_view_result_with_a_specified_view_name_is_asked_if_it_uses_the_specified_view_name
    {
        private const string ViewName = "ViewName";
        static Exception exception;
        static object result;

        private Because of = () => exception = Catch.Exception(() => result = new TestViewResult() {ViewName = ViewName}.ShouldUseView(ViewName));

        It should_not_throw_an_exception = () => exception.ShouldBeNull();

        It should_allow_the_chaining_of_view_result_assertions = () => result.ShouldBeOfType<ActionResultAnd<TestViewResult>>();
    }

    [Subject(typeof(ViewResultBaseExtensions))]
    public class when_a_view_result_with_a_specified_view_name_is_asked_if_it_uses_the_another_view_name
    {
        private const string ViewName = "ViewName";
        static Exception exception;
        static object result;

        private Because of = () => exception = Catch.Exception(() => result = new TestViewResult() {ViewName = ViewName}.ShouldUseView("Other" + ViewName));

        It should_throw_an_exception = () => exception.ShouldBeOfType<SpecificationException>();
    }

    [Subject(typeof(ViewResultBaseExtensions))]
    public class when_a_view_result_with_a_specified_view_name_is_asked_if_it_uses_the_default_view 
    {
        static Exception exception;

        Because of = () => exception = Catch.Exception(()=> new TestViewResult() { ViewName = "NonDefault" }.ShouldUseDefaultView());

        It should_throw_an_exception = () => exception.ShouldBeOfType<SpecificationException>();
    }

    [Subject(typeof(ViewResultBaseExtensions))]
    public class when_a_view_result_with_no_specified_view_name_is_asked_if_it_uses_the_default_view
    {
        static Exception exception;
        static object result;

        Because of = () => exception = Catch.Exception(() => result = new TestViewResult().ShouldUseDefaultView());

        It should_not_throw_an_exception = () => exception.ShouldBeNull();

        It should_allow_the_chaining_of_view_result_assertions = () => result.ShouldBeOfType<ActionResultAnd<TestViewResult>>();
    }

    [Subject(typeof(ViewResultBaseExtensions))]
    public class when_a_view_result_is_asked_to_return_the_model_as_a_specified_type_and_the_model_is_that_type
    {
        static Exception exception;
        static object result;
        static TestViewResult viewResult;

        Establish context = () =>
            {
                viewResult = new TestViewResult { ViewData = { Model = "Model is a string" } };
            };

        Because of = () => exception = Catch.Exception(() => result = viewResult.ShouldHaveModelOfType<string>());

        It should_not_throw_an_exception = () => exception.ShouldBeNull();

        It should_should_allow_the_chaining_of_model_type_assertions = () => result.ShouldBeOfType<ModelTypeAnd<string>>();
    }

    [Subject(typeof (ViewResultBaseExtensions))]
    public class when_a_view_result_is_asked_if_there_is_no_model_and_the_model_is_not_null
    {
        static Exception exception;
        static TestViewResult viewResult;

        Establish context = () =>
                                {
                                    viewResult = new TestViewResult {ViewData = {Model = new object()}};
                                };

        Because of = () => exception = Catch.Exception(() => viewResult.ShouldNotHaveAModel());

        It should_throw_an_exception = () => exception.ShouldBeOfType<SpecificationException>();
    }

    [Subject(typeof(ViewResultBaseExtensions))]
    public class when_a_view_result_is_asked_if_there_is_no_model_and_the_model_is_null
    {
        static Exception exception;
        static TestViewResult viewResult;
        static object result;

        Establish context = () =>
                                {
                                    viewResult = new TestViewResult {ViewData = {Model = null}};
                                };

        Because of = () => exception = Catch.Exception(() => result = viewResult.ShouldNotHaveAModel());

        It should_not_throw_an_exception = () => exception.ShouldBeNull();

        It should_allow_the_chaining_of_view_result_assertions = () => result.ShouldBeOfType<ActionResultAnd<TestViewResult>>();
    }
}   